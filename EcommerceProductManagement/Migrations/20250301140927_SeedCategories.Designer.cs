// <auto-generated />
using System;
using EcommerceProductManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceProductManagement.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250301140927_SeedCategories")]
    partial class SeedCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All electronic devices, including gadgets, appliances, and accessories.",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Trendy clothing, shoes, and accessories for men, women, and kids.",
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Furniture, appliances, cookware, and home decor items.",
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Skincare, haircare, cosmetics, and grooming products.",
                            Name = "Beauty & Personal Care"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sports gear, fitness equipment, and outdoor adventure essentials.",
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Car accessories, parts, and maintenance products.",
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Novels, textbooks, office supplies, and study materials.",
                            Name = "Books & Stationery"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Kids' toys, board games, and video gaming accessories.",
                            Name = "Toys & Games"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Supplements, fitness gear, and medical essentials.",
                            Name = "Health & Wellness"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Food, beverages, and daily household necessities.",
                            Name = "Groceries & Essentials"
                        });
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderDate");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+OrderItem", b =>
                {
                    b.HasOne("EcommerceProductManagement.Models.Models+Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProductManagement.Models.Models+Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+ProductCategory", b =>
                {
                    b.HasOne("EcommerceProductManagement.Models.Models+Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProductManagement.Models.Models+Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EcommerceProductManagement.Models.Models+Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
